// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { TaskSystem } from "../../systems/Tasklist/TaskSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type TaskSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "TASK", name: "TaskSystem" }))
TaskSystemType constant taskSystem = TaskSystemType.wrap(
  0x73795441534b000000000000000000005461736b53797374656d000000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title TaskSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library TaskSystemLib {
  error TaskSystemLib_CallingFromRootSystem();

  function createTask(
    TaskSystemType self,
    address assignee,
    string memory description,
    uint256 deadline
  ) internal returns (uint256 taskId) {
    return CallWrapper(self.toResourceId(), address(0)).createTask(assignee, description, deadline);
  }

  function updateTaskAssignee(TaskSystemType self, uint256 taskId, address newAssignee) internal {
    return CallWrapper(self.toResourceId(), address(0)).updateTaskAssignee(taskId, newAssignee);
  }

  function updateTaskDeadline(TaskSystemType self, uint256 taskId, uint256 newDeadline) internal {
    return CallWrapper(self.toResourceId(), address(0)).updateTaskDeadline(taskId, newDeadline);
  }

  function updateTaskDescription(TaskSystemType self, uint256 taskId, string memory newDescription) internal {
    return CallWrapper(self.toResourceId(), address(0)).updateTaskDescription(taskId, newDescription);
  }

  function completeTask(TaskSystemType self, uint256 taskId) internal {
    return CallWrapper(self.toResourceId(), address(0)).completeTask(taskId);
  }

  function createTask(
    CallWrapper memory self,
    address assignee,
    string memory description,
    uint256 deadline
  ) internal returns (uint256 taskId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TaskSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _createTask_address_string_uint256.createTask,
      (assignee, description, deadline)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (uint256));
  }

  function updateTaskAssignee(CallWrapper memory self, uint256 taskId, address newAssignee) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TaskSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _updateTaskAssignee_uint256_address.updateTaskAssignee,
      (taskId, newAssignee)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function updateTaskDeadline(CallWrapper memory self, uint256 taskId, uint256 newDeadline) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TaskSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _updateTaskDeadline_uint256_uint256.updateTaskDeadline,
      (taskId, newDeadline)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function updateTaskDescription(CallWrapper memory self, uint256 taskId, string memory newDescription) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TaskSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _updateTaskDescription_uint256_string.updateTaskDescription,
      (taskId, newDescription)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function completeTask(CallWrapper memory self, uint256 taskId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TaskSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_completeTask_uint256.completeTask, (taskId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function createTask(
    RootCallWrapper memory self,
    address assignee,
    string memory description,
    uint256 deadline
  ) internal returns (uint256 taskId) {
    bytes memory systemCall = abi.encodeCall(
      _createTask_address_string_uint256.createTask,
      (assignee, description, deadline)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (uint256));
  }

  function updateTaskAssignee(RootCallWrapper memory self, uint256 taskId, address newAssignee) internal {
    bytes memory systemCall = abi.encodeCall(
      _updateTaskAssignee_uint256_address.updateTaskAssignee,
      (taskId, newAssignee)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function updateTaskDeadline(RootCallWrapper memory self, uint256 taskId, uint256 newDeadline) internal {
    bytes memory systemCall = abi.encodeCall(
      _updateTaskDeadline_uint256_uint256.updateTaskDeadline,
      (taskId, newDeadline)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function updateTaskDescription(RootCallWrapper memory self, uint256 taskId, string memory newDescription) internal {
    bytes memory systemCall = abi.encodeCall(
      _updateTaskDescription_uint256_string.updateTaskDescription,
      (taskId, newDescription)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function completeTask(RootCallWrapper memory self, uint256 taskId) internal {
    bytes memory systemCall = abi.encodeCall(_completeTask_uint256.completeTask, (taskId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(TaskSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(TaskSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(TaskSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(TaskSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(TaskSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (TaskSystemType) {
    return TaskSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(TaskSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _createTask_address_string_uint256 {
  function createTask(address assignee, string memory description, uint256 deadline) external;
}

interface _updateTaskAssignee_uint256_address {
  function updateTaskAssignee(uint256 taskId, address newAssignee) external;
}

interface _updateTaskDeadline_uint256_uint256 {
  function updateTaskDeadline(uint256 taskId, uint256 newDeadline) external;
}

interface _updateTaskDescription_uint256_string {
  function updateTaskDescription(uint256 taskId, string memory newDescription) external;
}

interface _completeTask_uint256 {
  function completeTask(uint256 taskId) external;
}

using TaskSystemLib for TaskSystemType global;
using TaskSystemLib for CallWrapper global;
using TaskSystemLib for RootCallWrapper global;
